Shader "Custom/BotWGrassModified"
{
    // if shader is not SRP Batcher compatible then uncomment the relevant properties
	Properties
	{
        [MainTexture] _BaseMap("Blade Texture", 2D) = "white" {}
        [MainColor] _BaseColor("Base Color", Color) = (1,1,1,1)
		_GrassTipColor("Tip Color", Color) = (1, 1, 1, 1)

		_BladeWidthMin("Blade Width (Min)", Range(0, 0.1)) = 0.02
		_BladeWidthMax("Blade Width (Max)", Range(0, 0.1)) = 0.05
		_BladeHeightMin("Blade Height (Min)", Range(0, 2)) = 0.1
		_BladeHeightMax("Blade Height (Max)", Range(0, 2)) = 0.2

		_BladeSegments("Blade Segments", Range(1, 10)) = 3
		_BladeBendDistance("Blade Forward Amount", Float) = 0.38
		_BladeBendCurve("Blade Curvature Amount", Range(1, 4)) = 2

		_BendDelta("Bend Variation", Range(0, 1)) = 0.2

		_TessellationGrassDistance("Tessellation Grass Distance", Range(0.01, 2)) = 0.1

		_GrassMap("Grass Visibility Map", 2D) = "white" {}
		_GrassThreshold("Grass Visibility Threshold", Range(-0.1, 1)) = 0.5
		_GrassFalloff("Grass Visibility Fade-In Falloff", Range(0, 0.5)) = 0.05

		_WindMap("Wind Offset Map", 2D) = "bump" {}
		_WindVelocity("Wind Velocity", Vector) = (1, 0, 0, 0)
		_WindFrequency("Wind Pulse Frequency", Range(0, 1)) = 0.01

        _RandomValueMap("Random Value Map", 2D) = "white" {}

        //[HideInInspector]_WorkflowMode("WorkflowMode", Float) = 1.0
        //[HideInInspector]_Cutoff("Alpha Cutoff", Range(0.0, 1.0)) = 0.5
        //[HideInInspector]_Smoothness("Smoothness", Range(0.0, 1.0)) = 0.5
        //[HideInInspector]_SmoothnessTextureChannel("Smoothness texture channel", Float) = 0
        
        //[HideInInspector]_Metallic("Metallic", Range(0.0, 1.0)) = 0.0
        //[HideInInspector]_MetallicGlossMap("Metallic", 2D) = "white" {}

        //[HideInInspector]_SpecColor("Specular", Color) = (0.2, 0.2, 0.2)
        //[HideInInspector]_SpecGlossMap("Specular", 2D) = "white" {}

        //[HideInInspector][ToggleOff] _SpecularHighlights("Specular Highlights", Float) = 1.0
        //[HideInInspector][ToggleOff] _EnvironmentReflections("Environment Reflections", Float) = 1.0

        //[HideInInspector]_BumpScale("Scale", Float) = 1.0
        //[HideInInspector]_BumpMap("Normal Map", 2D) = "bump" {}

        //[HideInInspector]_Parallax("Scale", Range(0.005, 0.08)) = 0.005
        //[HideInInspector]_ParallaxMap("Height Map", 2D) = "black" {}

        //[HideInInspector]_OcclusionStrength("Strength", Range(0.0, 1.0)) = 1.0
        //[HideInInspector]_OcclusionMap("Occlusion", 2D) = "white" {}

        //[HideInInspector][HDR] _EmissionColor("Color", Color) = (0,0,0)
        //[HideInInspector]_EmissionMap("Emission", 2D) = "white" {}

        //[HideInInspector]_DetailMask("Detail Mask", 2D) = "white" {}
        //[HideInInspector]_DetailAlbedoMapScale("Scale", Range(0.0, 2.0)) = 1.0
        //[HideInInspector]_DetailAlbedoMap("Detail Albedo x2", 2D) = "linearGrey" {}
        //[HideInInspector]_DetailNormalMapScale("Scale", Range(0.0, 2.0)) = 1.0
        //[HideInInspector][Normal] _DetailNormalMap("Normal Map", 2D) = "bump" {}

        // SRP batching compatibility for Clear Coat (Not used in Lit)
        //[HideInInspector] _ClearCoatMask("_ClearCoatMask", Float) = 0.0
        //[HideInInspector] _ClearCoatSmoothness("_ClearCoatSmoothness", Float) = 0.0

        // Blending state
        //[HideInInspector]_Surface("__surface", Float) = 0.0
        //[HideInInspector]_Blend("__blend", Float) = 0.0
        //[HideInInspector]_Cull("__cull", Float) = 2.0
        //[HideInInspector][ToggleUI] _AlphaClip("__clip", Float) = 0.0
        //[HideInInspector] _SrcBlend("__src", Float) = 1.0
        //[HideInInspector] _DstBlend("__dst", Float) = 0.0
        //[HideInInspector] _ZWrite("__zw", Float) = 1.0

        //[HideInInspector][ToggleUI] _ReceiveShadows("Receive Shadows", Float) = 1.0
        // Editmode props
        //[HideInInspector]_QueueOffset("Queue offset", Float) = 0.0

        // ObsoleteProperties
        //[HideInInspector] _MainTex("BaseMap", 2D) = "white" {}
        //[HideInInspector] _Color("Base Color", Color) = (1, 1, 1, 1)
        //[HideInInspector] _GlossMapScale("Smoothness", Float) = 0.0
        //[HideInInspector] _Glossiness("Smoothness", Float) = 0.0
        //[HideInInspector] _GlossyReflections("EnvironmentReflections", Float) = 0.0

        //[HideInInspector][NoScaleOffset]unity_Lightmaps("unity_Lightmaps", 2DArray) = "" {}
        //[HideInInspector][NoScaleOffset]unity_LightmapsInd("unity_LightmapsInd", 2DArray) = "" {}
        //[HideInInspector][NoScaleOffset]unity_ShadowMasks("unity_ShadowMasks", 2DArray) = "" {}
	}

	SubShader
	{
		Tags
		{
			"RenderType" = "Opaque"
			"Queue" = "Geometry"
			"RenderPipeline" = "UniversalPipeline"
		}	

		// This pass draws the grass blades generated by the geometry shader.
        Pass
        {
			Name "GrassPass"
			Tags { "LightMode" = "UniversalForward" }

            LOD 100
		    Cull Off

            HLSLPROGRAM

#if (UNITY_VERSION >= 202111)
            #pragma multi_compile _ _MAIN_LIGHT_SHADOWS _MAIN_LIGHT_SHADOWS_CASCADE _MAIN_LIGHT_SHADOWS_SCREEN
            #pragma multi_compile_fragment _ _LIGHT_LAYERS
#else
            #pragma multi_compile _ _MAIN_LIGHT_SHADOWS
            #pragma multi_compile _ _MAIN_LIGHT_SHADOWS_CASCADE
#endif

            #pragma multi_compile _ _ADDITIONAL_LIGHTS_VERTEX _ADDITIONAL_LIGHTS
            #pragma multi_compile _ _ADDITIONAL_LIGHT_SHADOWS
            #pragma multi_compile _ _SHADOWS_SOFT
            #pragma multi_compile _ _MIXED_LIGHTING_SUBTRACTIVE
            #pragma multi_compile_fragment _ _SCREEN_SPACE_OCCLUSION

            #pragma multi_compile _ DIRLIGHTMAP_COMBINED
            #pragma multi_compile _ LIGHTMAP_ON
            #pragma multi_compile_fog

            //#pragma prefer_hlslcc gles
            #pragma exclude_renderers gles gles3 glcore
            //#pragma exclude_renderers d3d11_9x
            #pragma target 4.5

			#pragma require geometry
			#pragma require tessellation tessHW

			//#pragma vertex vert
			#pragma vertex geomVert
			#pragma hull hull
			#pragma domain domain
			#pragma geometry geom
            #pragma fragment frag

			#include "./Lit.hlsl"

			ENDHLSL
		}

		Pass
        {
            // Lightmode matches the ShaderPassName set in UniversalRenderPipeline.cs. SRPDefaultUnlit and passes with
            // no LightMode tag are also rendered by Universal Render Pipeline
            Name "GBuffer"
            Tags{"LightMode" = "UniversalGBuffer"}

            LOD 100
            ZWrite On
            ZTest LEqual
            Cull Off

            HLSLPROGRAM
            #pragma exclude_renderers gles gles3 glcore
            #pragma target 4.5

            // -------------------------------------
            // Material Keywords
            #pragma shader_feature_local _NORMALMAP
            #pragma shader_feature_local_fragment _ALPHATEST_ON
            //#pragma shader_feature_local_fragment _ALPHAPREMULTIPLY_ON
            #pragma shader_feature_local_fragment _EMISSION
            #pragma shader_feature_local_fragment _METALLICSPECGLOSSMAP
            #pragma shader_feature_local_fragment _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A
            #pragma shader_feature_local_fragment _OCCLUSIONMAP
            #pragma shader_feature_local _PARALLAXMAP
            #pragma shader_feature_local _ _DETAIL_MULX2 _DETAIL_SCALED

            #pragma shader_feature_local_fragment _SPECULARHIGHLIGHTS_OFF
            #pragma shader_feature_local_fragment _ENVIRONMENTREFLECTIONS_OFF
            #pragma shader_feature_local_fragment _SPECULAR_SETUP
            #pragma shader_feature_local _RECEIVE_SHADOWS_OFF

            // -------------------------------------
            // Universal Pipeline keywords
            #pragma multi_compile _ _MAIN_LIGHT_SHADOWS _MAIN_LIGHT_SHADOWS_CASCADE _MAIN_LIGHT_SHADOWS_SCREEN
            //#pragma multi_compile _ _ADDITIONAL_LIGHTS_VERTEX _ADDITIONAL_LIGHTS
            //#pragma multi_compile _ _ADDITIONAL_LIGHT_SHADOWS
            #pragma multi_compile_fragment _ _REFLECTION_PROBE_BLENDING
            #pragma multi_compile_fragment _ _REFLECTION_PROBE_BOX_PROJECTION
            #pragma multi_compile_fragment _ _SHADOWS_SOFT
            #pragma multi_compile_fragment _ _DBUFFER_MRT1 _DBUFFER_MRT2 _DBUFFER_MRT3
            #pragma multi_compile_fragment _ _LIGHT_LAYERS
            #pragma multi_compile_fragment _ _RENDER_PASS_ENABLED

            // -------------------------------------
            // Unity defined keywords
            #pragma multi_compile _ LIGHTMAP_SHADOW_MIXING
            #pragma multi_compile _ SHADOWS_SHADOWMASK
            #pragma multi_compile _ DIRLIGHTMAP_COMBINED
            #pragma multi_compile _ LIGHTMAP_ON
            #pragma multi_compile _ DYNAMICLIGHTMAP_ON
            #pragma multi_compile_fragment _ _GBUFFER_NORMALS_OCT

            //--------------------------------------
            // GPU Instancing
            #pragma multi_compile_instancing
            #pragma instancing_options renderinglayer
            #pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma require geometry
			#pragma require tessellation tessHW

            #pragma vertex geomVert
			#pragma hull hull
			#pragma domain domain
			#pragma geometry geom
            #pragma fragment frag

			#include "./Lit.hlsl"

            ENDHLSL
        }

        Pass
        {
            Name "DepthOnly"
            Tags { "LightMode" = "DepthOnly" }

            ZWrite On
            ColorMask 0

            HLSLPROGRAM
            #pragma exclude_renderers gles gles3 glcore
            #pragma vertex vert
            #pragma require geometry
            #pragma geometry geom
            #pragma fragment frag
            #include "./Lit.hlsl"
            ENDHLSL
        }

        Pass
        {
            Name "DepthNormals"
            Tags { "LightMode" = "DepthNormals" }

            ZWrite On

            HLSLPROGRAM
            #pragma exclude_renderers gles gles3 glcore
            #pragma vertex vert
            #pragma require geometry
            #pragma geometry geom
            #pragma fragment frag
            #include "./Lit.hlsl"
            ENDHLSL
        }

        Pass
        {
            Name "ShadowCaster"
            Tags { "LightMode" = "ShadowCaster" }

            ZWrite On
            ZTest LEqual
            ColorMask 0

            HLSLPROGRAM
            #pragma exclude_renderers gles gles3 glcore
            #pragma vertex vert
            #pragma require geometry
            #pragma geometry geom
            #pragma fragment frag
            #include "./Lit.hlsl"
            ENDHLSL
        }

    }
}
